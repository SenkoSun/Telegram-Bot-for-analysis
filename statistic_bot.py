from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
from pathlib import Path
import json
import re


file_path = Path(__file__).parent / 'json' / 'result.json'

BOT_TOKEN = 'token'

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()



devices = dict()
problems = dict()

def analiz():
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    for i in data['messages']:
        if i['type'] == 'message':
            sms = [j.split() for j in i['text'].split("\n")]
            if (sms[0][0][0] == "‚ùó"):
                
                problems.setdefault(sms[0][1], dict())
                problems[sms[0][1]]["check"] = False
                problems[sms[0][1]]["date"] = sms[3][2]
                problems[sms[0][1]]["place"] = sms[1][1][:sms[1][1].find("_")]
                
                devices.setdefault(sms[1][1], dict())
                devices[sms[1][1]]["check"] = False
                devices[sms[1][1]].setdefault("problems", []).append(sms[0][1])
                devices[sms[1][1]]["date_last_break"] = sms[3][2] 
                
                
            elif (sms[0][0][0] == "‚úÖ"):    
                
                problems.setdefault(sms[0][1], dict())
                problems[sms[0][1]]["check"] = True
                problems[sms[0][1]]["date"] = sms[2][2]
                problems[sms[0][1]]["place"] = sms[1][1][:sms[1][1].find("_")]
                
                devices.setdefault(sms[1][1], dict())
                devices[sms[1][1]]["check"] = True
                if sms[0][1] not in devices[sms[1][1]].setdefault("problems", []): 
                    devices[sms[1][1]]["problems"].append(sms[0][1])
                    
def vivod_problems(sms):
    pass

def vivod_device(sms):
    pass

@dp.message(Command(commands="start"))
async def process_start_command1(message: Message):
    await message.answer(f'–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. üòÑ\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ /help ‚ùî\n' 
                         '–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üí±')

@dp.message(Command(commands="help"))
async def process_start_command1(message: Message):
    await message.answer(f'–í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: üòÆ')
    await message.answer(f'/start - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòÅ')
    await message.answer(f'/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ ‚ùì')
    await message.answer(f'/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞ –¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥/üßê')
    await message.answer(f'/all_device - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—èü§ù')
    await message.answer(f'/rec_device - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—éüòü')
    await message.answer(f'/check - –Ω–µ–¥–∞–≤–Ω–∏–µ, –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ü•∫')
    

@dp.message(Command(commands="stats"))
async def stats(message: Message):
    await message.answer(f'kek')

@dp.message(Command(commands="all_device"))
async def all_device(message: Message):
    await message.answer(f'kek')

@dp.message(Command(commands="rec_device"))
async def rec_device(message: Message):
    await message.answer(f'kek')

@dp.message(Command(commands="check"))
async def check(message: Message):
    await message.answer(f'kek')        

@dp.message(lambda msg: msg.text and msg.textisdigit())
async def number_problem(message: Message):
    await message.answer(f'–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')    

@dp.message(lambda msg: msg.text and "_" in msg.text)
async def number_problem(message: Message):
    await message.answer(f'–¢–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')    

if __name__ == '__main__':
    analiz()
    dp.run_polling(bot)