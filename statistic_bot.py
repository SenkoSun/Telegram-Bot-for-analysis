from config import BOT_TOKEN
from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InputFile
from aiogram.types import BufferedInputFile
import asyncio
from aiogram import F
from aiogram.types import CallbackQuery
from pathlib import Path
import json
import matplotlib.pyplot as plt
import io
from datetime import datetime, date
import calendar
from aiogram import types


file_path = Path(__file__).parent / 'json' / 'result.json' # –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞ 'test_result.json'

"BOT_TOKEN=your_token_here"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

devices = dict()
problems = dict()

users = dict()

def new_user(id):
    global users
    if id not in users:
        users[id] = \
            {
                'page': 1,
                'maxpage': 1,
                'bookmarks': set(),
                'type_spisok': 'problem',
                'spisok': [],
                'datefirst': ""
            }

today = str(str(datetime.today()).replace("-", ".").split()[0])
actual_date = "0.0.0"
average_failures = 0
months = {"01": "–Ø–Ω–≤–∞—Ä—å", "02": "–§–µ–≤—Ä–∞–ª—å", "03": "–ú–∞—Ä—Ç", "04": "–ê–ø—Ä–µ–ª—å",
               "05": "–ú–∞–π", "06": "–ò—é–Ω—å", "07": "–ò—é–ª—å", "08": "–ê–≤–≥—É—Å—Ç",
               "09": "–°–µ–Ω—Ç—è–±—Ä—å", "10": "–û–∫—Ç—è–±—Ä—å", "11": "–ù–æ—è–±—Ä—å", "12": "–î–µ–∫–∞–±—Ä—å"}

PAGE_PROBLEM = 20
PAGE_DEVICE = 20

def analiz():
    global actual_date, average_failures
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    for i in data['messages']:
        if i['type'] == 'message' and i['from_id'] in ["user6031905550"]:
            sms = [j.split() for j in i['text'].split("\n")]
            if (sms[0][0][0] == "‚ùó"):
                
                problems.setdefault(sms[0][1], dict())
                problems[sms[0][1]]["check"] = False
                problems[sms[0][1]]["device"] = sms[1][1]
                problems[sms[0][1]]["date"] = sms[3][2]
                problems[sms[0][1]]["place"] = (sms[1][1].split("_")[0] if sms[1][1].split("_")[0] not in ["local", "inet"] else sms[1][1].split("_")[1])
                problems[sms[0][1]]["description"] = " ".join(sms[2])
                
                devices.setdefault(sms[1][1], dict())
                devices[sms[1][1]]["check"] = False
                devices[sms[1][1]]["description"] = " ".join(sms[2])
                
                if sms[0][1] not in devices[sms[1][1]].setdefault("problems", []): 
                    devices[sms[1][1]]["problems"].append(sms[0][1])
                    average_failures += 1
                if sms[3][2] not in devices[sms[1][1]].setdefault("dates_break", []): 
                    devices[sms[1][1]]["dates_break"].append(sms[3][2])
                    
                actual_date = sms[3][2]
                
                
            elif (sms[0][0][0] == "‚úÖ"):    
                
                if sms[0][1] in problems:
                    problems[sms[0][1]]["check"] = True
                
                if (sms[1][1] in devices):
                    devices[sms[1][1]]["check"] = True
    
    average_failures = average_failures // len(devices.keys())
                
            
    
def send_problem(number):
    problema = problems[number]
    otvet = f'–ü—Ä–æ–±–ª–µ–º–∞ –Ω–æ–º–µ—Ä - {number} üî¢\n' \
            f'–°—Ç–∞—Ç—É—Å - {"–†–µ—à–µ–Ω–∞ ‚úÖ" if problema["check"] else "–ù–µ —Ä–µ—à–µ–Ω–∞ ‚ùå"}\n' \
            f'–ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º - {problema["device"]} üßæ\n' \
            f'–î–∞—Ç–∞ - {problema["date"]} üìÖ\n' \
            f'–ú–µ—Å—Ç–æ - {problema["place"]} üß≠\n' \
            f'–û–ø–∏—Å–∞–Ω–∏–µ - {problema["description"] if problema["description"][0] != "‚ùå" else problema["description"][1:]}üìí'

    return otvet


def send_device(name):
    device = devices[name]
    otvet = f'–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - {name} üÜé\n' \
            f'–°—Ç–∞—Ç—É—Å - {"–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç ‚úÖ" if device["check"] else "–ò–º–µ—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã ‚ùå"}\n' \
            f'–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–±–ª–µ–º—ã - {device["dates_break"][-1]} üìÜ\n' \
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è - {len(device["problems"])} üïõ\n' \
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –≥–æ–¥ - {len([i for i in device["problems"] if compare_date(problems[i]["date"], today)[2] == 0])} üï∞Ô∏è\n'\
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –º–µ—Å—è—Ü - {len([i for i in device["problems"] if sum(compare_date(problems[i]["date"], today)[1:]) == 0])} ‚è≤Ô∏è\n'\
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –¥–µ–Ω—å - {len([i for i in device["problems"] if sum(compare_date(problems[i]["date"], today)) == 0])} ‚è±Ô∏è\n' \
            f'–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º - {", ".join([i for i in device["problems"] if not problems[i]["check"]][-5:])}'
    return otvet


def compare_date(date1, date2):
    y1, m1, d1 = map(int, date1.split('.'))
    y2, m2, d2 = map(int, date2.split('.'))
    
    days1 = d1 + m1 * 30 + y1 * 365 
    days2 = d2 + m2 * 30 + y2 * 365 
    delta_days = abs(days2 - days1)
    
    years = delta_days // 365
    remaining_days = delta_days % 365
    months = remaining_days // 30
    days = remaining_days % 30
    
    return [days, months, years]
    


async def set_main_menu(bot: Bot):
    main_menu_commands = [
        # BotCommand(command='/start',
        #            description='–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòÅ'),
        # BotCommand(command='/help',
        #            description='—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ ‚ùì'),
        BotCommand(command='/stats',
                   description='–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞ –¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥/ üßê'),
        BotCommand(command='/all_device',
                   description='—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è ü§ù'),
        BotCommand(command='/rec_device',
                   description='—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é üòü'),
        BotCommand(command='/check',
                   description='–Ω–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —Ä–µ—à–∏—Ç—å ü•∫'),
    ]

    await bot.set_my_commands(main_menu_commands)


def generator_inline_buttons(width, *args, last_btn1="", last_btn2="", **kwargs):
    buttons = []
    kb_builder = InlineKeyboardBuilder()
    for i in args:
        buttons.append(InlineKeyboardButton(text=str(i), callback_data=str(i)))
    for call, text in kwargs.items():
        buttons.append(InlineKeyboardButton(text=str(text), callback_data=call))

    kb_builder.row(*buttons, width=width)
    buttons = []
    if last_btn1:
        buttons.append(InlineKeyboardButton(text=last_btn1.split(" - ")[1], callback_data=last_btn1.split(" - ")[0]))
    if last_btn2:
        buttons.append(InlineKeyboardButton(text=last_btn2.split(" - ")[1], callback_data=last_btn2.split(" - ")[0]))
    if last_btn1 or last_btn2:    
        kb_builder.row(*buttons)

    return kb_builder.as_markup()
    

@dp.message(Command(commands="start"))
async def start(message: Message):
    new_user(message.from_user.id)
    await message.answer(f'–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. üòÑ\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ /help ‚ùî\n' 
                         '–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ü´∞\n'
                         f'–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–æ {actual_date}'
                         )


@dp.message(Command(commands="help"))
async def help(message: Message):
    new_user(message.from_user.id)
    await message.answer(f'–í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: üòÆ\n'
                        '/start - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòÅ\n'
                        '/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ ‚ùì\n'
                        '/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞ –¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥/üßê\n'
                        '/all_device - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—èü§ù\n'
                        '/rec_device - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—éüòü\n'
                        '/check - –Ω–µ–¥–∞–≤–Ω–∏–µ, –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ü•∫')
    

@dp.message(Command(commands="stats"))
async def stats(message: Message):
    new_user(message.from_user.id)
    sms = f'–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º - {len(problems)} üïõ \n' \
          f'–ü—Ä–æ–±–ª–µ–º –∑–∞ –≥–æ–¥ - {len([i for i in problems if compare_date(problems[i]["date"], today)[2] == 0])} üï∞Ô∏è \n' \
          f'–ü—Ä–æ–±–ª–µ–º –∑–∞ –º–µ—Å—è—Ü - {len([i for i in problems if sum(compare_date(problems[i]["date"], today)[1:]) == 0])} ‚è≤Ô∏è \n' \
          f'–ü—Ä–æ–±–ª–µ–º –∑–∞ –¥–µ–Ω—å - {len([i for i in problems if sum(compare_date(problems[i]["date"], today)) == 0])} ‚è±Ô∏è \n'
          
              
    graph = dict()
    for i in problems:
        if compare_date(problems[i]['date'], today)[1] <= 4:
            graph.setdefault(months[problems[i]['date'].split('.')[1]], 0)
            graph[months[problems[i]['date'].split('.')[1]]] += 1
    
    
    plt.figure(figsize=(10, 6))
    plt.bar(sorted(list(graph.keys()), key=lambda x: list(months.values()).index(x)), list(graph.values()))
    # plt.xlabel("–ú–µ—Å—è—Ü –≥–æ–¥–∞")
    plt.ylabel("–ü—Ä–æ–±–ª–µ–º –∑–∞ –º–µ—Å—è—Ü")
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–±–ª–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—è—Ü–∞')
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫)
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    await message.answer_photo(BufferedInputFile(buf.read(), filename='problems.png'))
    plt.close()
    buf.close()
        
    await message.answer(sms, reply_markup=generator_inline_buttons(3, problems_day = "–¥–µ–Ω—å ‚è±Ô∏è", problems_mounth = "–º–µ—Å—è—Ü ‚è≤Ô∏è", problems_year = "–≥–æ–¥ üï∞Ô∏è", problems_all='–≤—Å–µ –≤—Ä–µ–º—è üïõ'))

@dp.message(Command(commands="all_device"))
async def all_device(message: Message):
    new_user(message.from_user.id)
    sms = f'–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - {len(devices)} üåç \n' \
          f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–∞–±–æ—Ç–µ - {len([i for i in devices if devices[i]["check"]])} üåá \n' \
          f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω–µ - {len([i for i in devices if not devices[i]["check"]])} üåÉ \n'
          
    graph = dict()
    for i in devices:
        k = []
        for j in devices[i]["dates_break"]:
            if (compare_date(j, today))[1] <= 4 and months[j.split('.')[1]] not in k:
                graph.setdefault(months[j.split('.')[1]], 0)
                graph[months[j.split('.')[1]]] += 1
                k.append(months[j.split('.')[1]])
    
    plt.figure(figsize=(10, 6))
    plt.bar(sorted(list(graph.keys()), key=lambda x: list(months.values()).index(x)), list(graph.values()))
    # plt.xlabel("–ú–µ—Å—è—Ü –≥–æ–¥–∞")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    plt.title('–ì—Ä–∞—Ñ–∏–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—è—Ü–∞')
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫)
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    await message.answer_photo(BufferedInputFile(buf.read(), filename='devices.png'))
    plt.close()
    buf.close()
        
    await message.answer(sms, reply_markup=generator_inline_buttons(1, devices_all = "–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ üóíÔ∏è"))

@dp.message(Command(commands="rec_device"))
async def rec_device(message: Message):
    new_user(message.from_user.id)
    
    sms = f'–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - {len(devices)} ‚úÖ \n' \
          f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é - {len([i for i in devices if not devices[i]["check"] and len(devices[i]["problems"]) > average_failures for date in [compare_date(devices[i]["dates_break"][-1], today)] if sum(date[1:]) == 0 and date[0] <= 7])} ‚ÄºÔ∏è \n' \
          f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏‚¨áÔ∏è'
    
    await message.answer(sms, reply_markup=generator_inline_buttons(3, rec_devices_week = "–ó–∞ –Ω–µ–¥–µ–ª—é", rec_devices_mounth = "–ó–∞ –º–µ—Å—è—Ü", rec_devices_year = "–ó–∞ –ø–æ–ª –≥–æ–¥–∞", ignore = "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥"))

    
@dp.message(Command(commands="check"))
async def check(message: Message):
    new_user(message.from_user.id)
    sms = f'–ü—Ä–æ–±–ª–µ–º –∑–∞ –º–µ—Å—è—Ü - {len([i for i in problems if sum(compare_date(problems[i]["date"], today)[1:]) == 0])} ‚úÖ \n' \
          f'–†–µ–∫–æ–º–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é - {len([i for i in problems if not problems[i]["check"] for date in [compare_date(problems[i]["date"], today)] if sum(date[1:]) == 0 and date[0] <= 7])} ‚ÅâÔ∏è\n' \
          f'–ù–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã‚¨áÔ∏è'
        
    await message.answer(sms, reply_markup=generator_inline_buttons(3, rec_problems_week = "–ó–∞ –Ω–µ–¥–µ–ª—é", rec_problems_mounth = "–ó–∞ –º–µ—Å—è—Ü", rec_problems_year = "–ó–∞ –ø–æ–ª –≥–æ–¥–∞", ignore = "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥"))


@dp.message(lambda msg: msg.text and msg.text.isdigit())
async def number_problem(message: Message):
    if message.text in problems.keys():
        await message.answer(send_problem(message.text))
    else:
        await message.answer(f'–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üö´')    

@dp.message(lambda msg: msg.text and "_" in msg.text)
async def number_problem(message: Message):
    if message.text in devices.keys():
        await message.answer(send_device(message.text))
    else:
        await message.answer(f'–¢–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üö´')   


@dp.callback_query(F.text(text=['problems_day']))
async def process_button_day_problem(callback: CallbackQuery):
    new_user(callback.from_user.id)
    day_problems = [str(i) + f"{'‚úÖ' if problems[i]['check'] else '‚ùó'}" for i in problems if sum(compare_date(problems[i]["date"], today)) == 0]
    
    if (len(day_problems) == 0):
        await callback.message.edit_text(f"–ü—Ä–æ–±–ª–µ–º –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç üö´")
        return
    
    users[callback.from_user.id]['page'] = 0
    users[callback.from_user.id]['type_spisok'] = "problem"
    users[callback.from_user.id]['maxpage'] = len(day_problems) // PAGE_PROBLEM + bool(len(day_problems) % PAGE_PROBLEM) - 1
    users[callback.from_user.id]['spisok'] = day_problems
    
    await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                         reply_markup=generator_inline_buttons(5, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * PAGE_PROBLEM:users[callback.from_user.id]['page'] * PAGE_PROBLEM + PAGE_PROBLEM],
                                                last_btn1=('forward - >>' if len(users[callback.from_user.id]['spisok']) > PAGE_PROBLEM else '')))
    
@dp.callback_query(F.text(text=['problems_mounth']))
async def process_button_mounth_problem(callback: CallbackQuery):
    new_user(callback.from_user.id)
    mounth_problems = [str(i) + f"{'‚úÖ' if problems[i]['check'] else '‚ùó'}" for i in problems if sum(compare_date(problems[i]["date"], today)[1:]) == 0]
    
    if (len(mounth_problems) == 0):
        await callback.message.edit_text(f"–ü—Ä–æ–±–ª–µ–º –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç üö´")
        return
    
    users[callback.from_user.id]['page'] = 0
    users[callback.from_user.id]['type_spisok'] = "problem"
    users[callback.from_user.id]['maxpage'] = len(mounth_problems) // PAGE_PROBLEM + bool(len(mounth_problems) % PAGE_PROBLEM) - 1
    users[callback.from_user.id]['spisok'] = mounth_problems
    
    await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                         reply_markup=generator_inline_buttons(5, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * PAGE_PROBLEM:users[callback.from_user.id]['page'] * PAGE_PROBLEM + PAGE_PROBLEM],
                                                last_btn1=('forward - >>' if len(users[callback.from_user.id]['spisok']) > PAGE_PROBLEM else '')))

@dp.callback_query(F.text(text=['problems_year']))
async def process_button_year_problem(callback: CallbackQuery):
    new_user(callback.from_user.id)
    year_problems = [str(i) + f"{'‚úÖ' if problems[i]['check'] else '‚ùó'}" for i in problems if compare_date(problems[i]["date"], today)[2] == 0]
    
    if (len(year_problems) == 0):
        await callback.message.edit_text(f"–ü—Ä–æ–±–ª–µ–º –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç üö´")
        return
    
    users[callback.from_user.id]['page'] = 0
    users[callback.from_user.id]['type_spisok'] = "problem"
    users[callback.from_user.id]['maxpage'] = len(year_problems) // PAGE_PROBLEM + bool(len(year_problems) % PAGE_PROBLEM) - 1
    users[callback.from_user.id]['spisok'] = year_problems
    
    await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                         reply_markup=generator_inline_buttons(5, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * PAGE_PROBLEM:users[callback.from_user.id]['page'] * PAGE_PROBLEM + PAGE_PROBLEM],
                                                last_btn1=('forward - >>' if len(users[callback.from_user.id]['spisok']) > PAGE_PROBLEM else '')))

@dp.callback_query(F.text(text=['problems_all']))
async def process_button_year_problem(callback: CallbackQuery):
    new_user(callback.from_user.id)
    all_problems = [str(i) + f"{'‚úÖ' if problems[i]['check'] else '‚ùó'}" for i in problems]
    
    if (len(all_problems) == 0):
        await callback.message.edit_text(f"–ü—Ä–æ–±–ª–µ–º –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç üö´")
        return
    
    users[callback.from_user.id]['page'] = 0
    users[callback.from_user.id]['type_spisok'] = "problem"
    users[callback.from_user.id]['maxpage'] = len(all_problems) // PAGE_PROBLEM + bool(len(all_problems) % PAGE_PROBLEM) - 1
    users[callback.from_user.id]['spisok'] = all_problems
    
    await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                         reply_markup=generator_inline_buttons(5, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * PAGE_PROBLEM:users[callback.from_user.id]['page'] * PAGE_PROBLEM + PAGE_PROBLEM],
                                                last_btn1=('forward - >>' if len(users[callback.from_user.id]['spisok']) > PAGE_PROBLEM else '')))


@dp.callback_query(F.data.startswith("rec_problems"))
async def process_button_day_problem(callback: CallbackQuery):
    new_user(callback.from_user.id)
    period = F.data.split("_")[2]

    if period == "week":
        problems_rec = [str(i) + f"{'‚úÖ' if problems[i]['check'] else '‚ùó'}" for i in problems if not problems[i]["check"] for date in [compare_date(problems[i]["date"], today)] if sum(date[1:]) == 0 and date[0] < 7]
    elif period == "month":
        problems_rec = [str(i) + f"{'‚úÖ' if problems[i]['check'] else '‚ùó'}" for i in problems if not problems[i]["check"] for date in [compare_date(problems[i]["date"], today)] if sum(date[1:]) == 0]
    elif period == "year":
        problems_rec = [str(i) + f"{'‚úÖ' if problems[i]['check'] else '‚ùó'}" for i in problems if not problems[i]["check"] for date in [compare_date(problems[i]["date"], today)] if date[2] == 0 and date[1] < 6]
    
    if (len(problems_rec) == 0):
        await callback.message.edit_text(f"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üö´")
        return
    
    users[callback.from_user.id]['page'] = 0
    users[callback.from_user.id]['type_spisok'] = "problem"
    users[callback.from_user.id]['maxpage'] = len(problems_rec) // PAGE_PROBLEM + bool(len(problems_rec) % PAGE_PROBLEM) - 1
    users[callback.from_user.id]['spisok'] = problems_rec
    
    await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                         reply_markup=generator_inline_buttons(5, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * PAGE_PROBLEM:users[callback.from_user.id]['page'] * PAGE_PROBLEM + PAGE_PROBLEM],
                                                last_btn1=('forward - >>' if len(users[callback.from_user.id]['spisok']) > PAGE_PROBLEM else '')))


@dp.callback_query(F.data.startswith("rec_devices"))
async def process_button_day_problem(callback: CallbackQuery):
    new_user(callback.from_user.id)
    period = F.data.split("_")[2]

    if period == "week":
        devices_rec = [f"{'‚úÖ' if devices[i]['check'] else '‚ùó'}" + str(i) for i in devices if not devices[i]["check"] and len(devices[i]["problems"]) > average_failures for date in [compare_date(devices[i]["dates_break"][-1], today)] if sum(date[1:]) == 0 and date[0] <= 7]
    elif period == "month":
        devices_rec = [f"{'‚úÖ' if devices[i]['check'] else '‚ùó'}" + str(i) for i in devices if not devices[i]["check"] and len(devices[i]["problems"]) > average_failures for date in [compare_date(devices[i]["dates_break"][-1], today)] if sum(date[1:]) == 0]
    elif period == "year":
        devices_rec = [f"{'‚úÖ' if devices[i]['check'] else '‚ùó'}" + str(i) for i in devices if not devices[i]["check"] and len(devices[i]["problems"]) > average_failures for date in [compare_date(devices[i]["dates_break"][-1], today)] if date[2] == 0 and date[1] < 6]

    if (len(devices_rec) == 0):
        await callback.message.edit_text(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üö´")
        return
    
    users[callback.from_user.id]['page'] = 0
    users[callback.from_user.id]['type_spisok'] = "device"
    users[callback.from_user.id]['maxpage'] = len(devices_rec) // PAGE_DEVICE + bool(len(devices_rec) % PAGE_DEVICE) - 1
    users[callback.from_user.id]['spisok'] = devices_rec
    
    await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                         reply_markup=generator_inline_buttons(2, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * PAGE_DEVICE:users[callback.from_user.id]['page'] * PAGE_DEVICE + PAGE_DEVICE],
                                                last_btn1=('forward - >>' if len(users[callback.from_user.id]['spisok']) > PAGE_DEVICE else '')))


@dp.callback_query(F.text(text=['forward']))
async def process_button_forward_press(callback: CallbackQuery):
    elements_in_page = (PAGE_PROBLEM if users[callback.from_user.id]['type_spisok'] == "problem" else PAGE_DEVICE)
    width = 5 if users[callback.from_user.id]['type_spisok'] == "problem" else 2
    if users[callback.from_user.id]['page'] < users[callback.from_user.id]['maxpage'] - 1:
        users[callback.from_user.id]['page'] += 1
        await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                                         reply_markup=generator_inline_buttons(width, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * elements_in_page:users[callback.from_user.id]['page'] * elements_in_page + elements_in_page],
                                                                backward='<<',
                                                                forward='>>'))
    elif users[callback.from_user.id]['page'] == users[callback.from_user.id]['maxpage']:
        pass

    else:
        users[callback.from_user.id]['page'] += 1
        await callback.message.edit_text(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                                         reply_markup=generator_inline_buttons(width, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * elements_in_page:users[callback.from_user.id]['page'] * elements_in_page + elements_in_page],
                                                                last_btn1='backward - <<')
                                        )
    await callback.answer()


@dp.callback_query(F.text(text=['backward']))
async def process_button_backward_press(callback: CallbackQuery):
    elements_in_page = (PAGE_PROBLEM if users[callback.from_user.id]['type_spisok'] == "problem" else PAGE_DEVICE)
    width = 5 if users[callback.from_user.id]['type_spisok'] == "problem" else 2
    if users[callback.from_user.id]['page'] > 1:
        users[callback.from_user.id]['page'] -= 1
        await callback.message.edit_text(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                                         reply_markup=generator_inline_buttons(width, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page'] * elements_in_page:users[callback.from_user.id]['page'] * elements_in_page + elements_in_page],
                                                                backward='<<',
                                                                forward='>>'))
    elif users[callback.from_user.id]['page'] == 0:
        pass

    else:
        users[callback.from_user.id]['page'] -= 1
        await callback.message.edit_text(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {users[callback.from_user.id]['page'] + 1}/{users[callback.from_user.id]['maxpage'] + 1}",
                                         reply_markup=generator_inline_buttons(width, *users[callback.from_user.id]['spisok'][users[callback.from_user.id]['page']* elements_in_page:users[callback.from_user.id]['page'] * elements_in_page + elements_in_page],
                                                                forward='>>'))
    await callback.answer()

@dp.callback_query(lambda callback: callback.data[:-1].isdigit())
async def process_button_day_problem(callback: CallbackQuery):
    if callback.data[:-1] in problems:
        await callback.message.edit_text(send_problem(callback.data[:-1]))
    else:
        await callback.message.edit_text(f'–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üö´')


@dp.callback_query(lambda callback: callback.data and "_" in callback.data and callback.data[0] in ["‚úÖ", "‚ùó"])
async def process_button_day_problem(callback: CallbackQuery):
    if callback.data[1:] in devices:
        await callback.message.edit_text(send_device(callback.data[1:]))
    else:
        await callback.message.edit_text(f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üö´')
    

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def generate_calendar(year: int, month: int, select_mode: str = "start"):
    builder = InlineKeyboardBuilder()
    
    #–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–º–µ—Å—è—Ü –∏ –≥–æ–¥)
    month_name = calendar.month_name[month]
    builder.button(text=f"{month_name}", callback_data=f"list_month_{select_mode}_{year}")
    builder.button(text=f"{year}", callback_data=f"list_year_{select_mode}_{month}")
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    for day in week_days:
        builder.button(text=day, callback_data="ignore")
    
    # –Ø—á–µ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        for day in week:
            if day == 0:
                builder.button(text=" ", callback_data="ignore")
            # elif datefirst != "" and day == int(datefirst.split(".")[0]) and month == int(datefirst.split(".")[1]) and year == int(datefirst.split(".")[1]):
            #     builder.button(
            #         text=f"{day}‚úÖ", 
            #         callback_data=f"period_{select_mode}_{year}_{month}_{day}",
            #     )
            else:
                builder.button(
                    text=f" {day} ", 
                    callback_data=f"period_{select_mode}_{year}_{month}_{day}"
                )
    
    # –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–í–ø–µ—Ä–µ–¥"
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    builder.button(text="‚¨ÖÔ∏è", callback_data=f"change_month_{select_mode}_{prev_year}_{prev_month}")
    builder.button(text="‚û°Ô∏è", callback_data=f"change_month_{select_mode}_{next_year}_{next_month}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É (7 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏)
    builder.adjust(2, 7, *[7 for _ in month_calendar], 2)
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query(F.data.startswith("period_"))
async def process_date_selection(callback: types.CallbackQuery):
    _, select_mode, year, month, day = callback.data.split('_')
    date = datetime(int(year), int(month), int(day)).strftime("%d.%m.%Y")
    
    datefirst = users[callback.from_user.id]['datefirst']
    
    if select_mode == "start":
        users[callback.from_user.id]['datefirst'] = date
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: <b>{users[callback.from_user.id]['datefirst']}</b>     üìÖ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ \n"\
             "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=generate_calendar(int(year), int(month), "end"),
            parse_mode="HTML"
        )
    else:
        if datetime(int(date.split(".")[2]), int(date.split(".")[1]), int(date.split(".")[0])) > datetime(int(datefirst.split(".")[2]), int(datefirst.split(".")[1]), int(datefirst.split(".")[0])):
            await callback.message.edit_text(
                f"–ü–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω: <b>{datefirst} - {date}</b> ‚úÖ\n",
                parse_mode="HTML"
            )
            users[callback.from_user.id]['datefirst'] = ""
        else:
            await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞, —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚ùå„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ \n"\
            f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: <b>{datefirst}</b> üìÖ\n" \
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
            reply_markup=generate_calendar(int(year), int(month), "end"),
            parse_mode="HTML"
        )

@dp.callback_query(F.data.startswith("change_month_"))
async def change_month(callback: types.CallbackQuery):
    _, _, select_mode, year, month = callback.data.split('_')
    if (select_mode == "start"):
        await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É: üìÖ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ „ÄÄ„ÄÄ„ÄÄ ",
                reply_markup=generate_calendar(int(year), int(month), select_mode),
                parse_mode="HTML"
            )
    else:
        await callback.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: <b>{users[callback.from_user.id]['datefirst']}</b> üìÖ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ \n" \
                 "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:",
                reply_markup=generate_calendar(int(year), int(month), select_mode),
                parse_mode="HTML"
            )

@dp.callback_query(F.data.startswith("list_"))
async def choice_correct_month_year(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    _, choice_date, select_mode, dop_date = callback.data.split('_')
    
    months_spisok = calendar.month_name[1:]
    years = [i for i in range(datetime.now().year - 11, datetime.now().year + 1)]
    
    if choice_date == "year":
        for num_year in years:
            #builder.button(text=f"{str(num_year) + '‚úÖ' if (datefirst != '' and datefirst.split('.')[2] == num_year) else num_year}", callback_data=f"change_month_{select_mode}_{num_year}_{dop_date}")
            builder.button(text=f"{num_year}", callback_data=f"change_month_{select_mode}_{num_year}_{dop_date}")
        builder.adjust(4, 4, 4)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥–æ–¥:„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ ",
            reply_markup=builder.as_markup(),
        )
        
            
    elif choice_date == "month":
        for name_month in months_spisok:
            #builder.button(text=f"{name_month + '‚úÖ' if (datefirst != '' and datefirst.split('.')[1] == list(calendar.month_name).index(name_month)) else name_month}", callback_data=f"change_month_{select_mode}_{dop_date}_{list(calendar.month_name).index(name_month)}")
            builder.button(text=f"{name_month}", callback_data=f"change_month_{select_mode}_{dop_date}_{list(calendar.month_name).index(name_month)}")
        builder.adjust(4, 4, 4)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü: „ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ„ÄÄ ",
            reply_markup=builder.as_markup(),
        )
    

#–ï—Å–ª–∏ –ª–æ–≤–∏—Ç—Å—è –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–ª–ª–±—ç–∫d
@dp.callback_query()
async def process_button_day_problem(callback: CallbackQuery):
    print("--- –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ ---")
    print(f"User ID: {callback.from_user.id}")
    print(f"Username: @{callback.from_user.username}")
    print(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å callback_data: {callback.data}")
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π: message_id={callback.message.message_id}")
    print(f"–ß–∞—Ç: chat_id={callback.message.chat.id}")
    
    await callback.answer()



@dp.message(lambda msg: msg.document and msg.document.file_name.endswith('.json'))
async def handle_json_file(message: Message):
    try:
        file = await bot.get_file(message.document.file_id)

        save_filename = file_path
        
        await bot.download_file(file.file_path, destination=save_filename)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            json.load(f)
            
        analiz()
        
        await message.answer(f"‚úÖ JSON-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n"\
                             f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - {actual_date}")
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message()
async def any_msg(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await start(message) 
    else:
        await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å–∞ üòÖ \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã ü§®\n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞üëÄ")


if __name__ == '__main__':
    analiz()
    dp.startup.register(set_main_menu)
    dp.run_polling(bot, allowed_updates=[])