from config import BOT_TOKEN
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import asyncio
from pathlib import Path
import json
import re
from datetime import date as d


file_path = Path(__file__).parent / 'json' / 'result.json' # –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞ 'test_result.json'

"BOT_TOKEN=your_token_here"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()



devices = dict()
problems = dict()

def analiz():
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    for i in data['messages']:
        if i['type'] == 'message' and i['from_id'] in ["user6031905550"]:
            sms = [j.split() for j in i['text'].split("\n")]
            if (sms[0][0][0] == "‚ùó"):
                
                problems.setdefault(sms[0][1], dict())
                problems[sms[0][1]]["check"] = False
                problems[sms[0][1]]["date"] = sms[3][2]
                problems[sms[0][1]]["place"] = sms[1][1][:sms[1][1].find("_")]
                
                devices.setdefault(sms[1][1], dict())
                devices[sms[1][1]]["check"] = False
                devices[sms[1][1]]["date_last_break"] = sms[3][2] 
                if sms[0][1] not in devices[sms[1][1]].setdefault("problems", []): 
                    devices[sms[1][1]]["problems"].append(sms[0][1])
                
                
            elif (sms[0][0][0] == "‚úÖ"):    
                
                problems.setdefault(sms[0][1], dict())
                problems[sms[0][1]]["check"] = True
                problems[sms[0][1]]["device"] = sms[1][1]
                problems[sms[0][1]]["date"] = sms[2][2]
                problems[sms[0][1]]["place"] = sms[1][1][:sms[1][1].find("_")]
                
                devices.setdefault(sms[1][1], dict())
                devices[sms[1][1]]["check"] = True
                if sms[0][1] not in devices[sms[1][1]].setdefault("problems", []): 
                    devices[sms[1][1]]["problems"].append(sms[0][1])


@dp.message(Command(commands="start"))
async def process_start_command1(message: Message):
    await message.answer(f'–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. üòÑ\n'
                         '–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ /help ‚ùî\n' 
                         '–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ü´∞')


@dp.message(Command(commands="help"))
async def process_start_command1(message: Message):
    await message.answer(f'–í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã: üòÆ\n'
                        '/start - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòÅ\n'
                        '/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ ‚ùì\n'
                        '/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –∑–∞ –¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥/üßê\n'
                        '/all_device - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—èü§ù\n'
                        '/rec_device - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—éüòü\n'
                        '/check - –Ω–µ–¥–∞–≤–Ω–∏–µ, –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã ü•∫')
    
    
def send_problem(number):
    problema = problems[number]
    otvet = f'–ü—Ä–æ–±–ª–µ–º–∞ –Ω–æ–º–µ—Ä {number}\n' \
            f'–°—Ç–∞—Ç—É—Å {"–†–µ—à–µ–Ω–∞" if problema["check"] else "–ù–µ —Ä–µ—à–µ–Ω–∞"}\n' \
            f'–ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º {problema["device"]}\n' \
            f'–î–∞—Ç–∞ {problema["date"]}\n' \

    return otvet


def send_device(name):
    device = devices[name]
    today = str(d.today()).replace("-", ".")
    otvet = f'–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {name}\n' \
            f'–°—Ç–∞—Ç—É—Å: {"–ü—Ä–æ–±–ª–µ–º –Ω–µ—Ç" if device["check"] else "–ò–º–µ—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã"}\n' \
            f'–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–±–ª–µ–º—ã: {device["date_last_break"]}\n' \
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è {len(device["problems"])}\n' \
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –≥–æ–¥ {len([i for i in device["problems"] if compare_date(problems[i]["date"], today)[2] == 0])}\n'\
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –º–µ—Å—è—Ü {len([i for i in device["problems"] if sum(compare_date(problems[i]["date"], today)[1:]) == 0])}\n'\
            f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –∑–∞ –¥–µ–Ω—å {len([i for i in device["problems"] if sum(compare_date(problems[i]["date"], today)) == 0])}'
    return otvet


def compare_date(date1, date2):

    y1, m1, d1 = map(int, date1.split('.'))
    y2, m2, d2 = map(int, date2.split('.'))
    
    days1 = d1 + m1 * 30 + y1 * 365 
    days2 = d2 + m2 * 30 + y2 * 365 
    delta_days = abs(days2 - days1)
    
    years = delta_days // 365
    remaining_days = delta_days % 365
    months = remaining_days // 30
    days = remaining_days % 30
    
    return [days, months, years]

    

@dp.message(Command(commands="stats"))
async def stats(message: Message):
    await message.answer(f'kek')

@dp.message(Command(commands="all_device"))
async def all_device(message: Message):
    await message.answer(f'kek')

@dp.message(Command(commands="rec_device"))
async def rec_device(message: Message):
    await message.answer(f'kek')

@dp.message(Command(commands="check"))
async def check(message: Message):
    await message.answer(f'kek')        

@dp.message(lambda msg: msg.text and msg.text.isdigit())
async def number_problem(message: Message):
    if message.text in problems.keys():
        await message.answer(send_problem(message.text))
    else:
        await message.answer(f'–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')    

@dp.message(lambda msg: msg.text and "_" in msg.text)
async def number_problem(message: Message):
    if message.text in devices.keys():
        await message.answer(send_device(message.text))
    else:
        await message.answer(f'–¢–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')    

@dp.message()
async def send_echo(message: Message):
    await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å–∞ \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã \n–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")


if __name__ == '__main__':
    analiz()
    dp.run_polling(bot)